<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <meta name="description" content="plurry dashboard">
  <meta name="author" content="cycorld">

  <title>Plurry Station</title>
  <script src="/javascripts/jquery/jquery-2.1.4.min.js"></script>
  <script src="/javascripts/dashboard/peer.js"></script>
</head>
<body>
<div id="credentials">
  <input type="hidden" id="caller-id" size="15">
  <!--
  <button id="connect">Connect</button>
  -->
  <button id="client_btn" class="ui-btn ui-btn-inline">연결하기</button>
  <button id="dial" class="ui-btn ui-btn-inline" style="display:none;">Station에 접속하기</button>
  <a href="#" id="station_btn" class="ui-btn ui-btn-inline">플러리 스테이션</a>
</div>

<div id="dialler" data-active="false">
  <input type="hidden" id="recipient-id" value="station">
  <div class="remote">
    <h1>상대 영상</h1>
    <video id="remote-video" autoplay></video>
  </div>
  <div class="local">
    <h1>내 영상</h1>
    <video id="local-video" autoplay></video>
  </div>
  <div id="messages">
  </div>
<script>
document.addEventListener('DOMContentLoaded', function () {
  // PeerJS server location
  var SERVER_IP = 'petsitter.cycorld.com';
  var SERVER_PORT = 3003;

  // DOM elements manipulated as user interacts with the app
  var messageBox = document.querySelector('#messages');
  var callerIdEntry = document.querySelector('#caller-id');
  var connectBtn = document.querySelector('#connect');
  var recipientIdEntry = document.querySelector('#recipient-id');
  var dialBtn = document.querySelector('#dial');
  var remoteVideo = document.querySelector('#remote-video');
  var localVideo = document.querySelector('#local-video');

  // the ID set for this client
  var callerId = null;

  // PeerJS object, instantiated when this client connects with its
  // caller ID
  var peer = null;

  // the local video stream captured with getUserMedia()
  var localStream = null;

  // DOM utilities
  var makePara = function (text) {
    var p = document.createElement('p');
    p.innerText = text;
    return p;
  };

  var addMessage = function (para) {
    if (messageBox.firstChild) {
      messageBox.insertBefore(para, messageBox.firstChild);
    }
    else {
      messageBox.appendChild(para);
    }
  };

  var logError = function (text) {
    var p = makePara('ERROR: ' + text);
    p.style.color = 'red';
    addMessage(p);
  };

  var logMessage = function (text) {
    addMessage(makePara(text));
  };

  // get the local video and audio stream and show preview in the
  // "LOCAL" video element
  // successCb: has the signature successCb(stream); receives
  // the local video stream as an argument
  var getLocalStream = function (successCb) {
    if (localStream && successCb) {
      successCb(localStream);
    }
    else {
      navigator.webkitGetUserMedia(
        {
          audio: true,
          video: true
        },

        function (stream) {
          localStream = stream;

          localVideo.src = window.URL.createObjectURL(stream);

          if (successCb) {
            successCb(stream);
          }
        },

        function (err) {
          logError('failed to access local camera');
          logError(err.message);
        }
      );
    }
  };

  // set the "REMOTE" video element source
  var showRemoteStream = function (stream) {
    remoteVideo.src = window.URL.createObjectURL(stream);
  };

  // set caller ID and connect to the PeerJS server
  var connect = function () {
    callerId = callerIdEntry.value;

    if (!callerId) {
      logError('please set caller ID first');
      return;
    }

    try {
      // create connection to the ID server
      peer = new Peer(callerId, {host: SERVER_IP, port: SERVER_PORT});

      // hack to get around the fact that if a server connection cannot
      // be established, the peer and its socket property both still have
      // open === true; instead, listen to the wrapped WebSocket
      // and show an error if its readyState becomes CLOSED
      peer.socket._socket.onclose = function () {
        logError('no connection to server');
        peer = null;
      };

      // get local stream ready for incoming calls once the wrapped
      // WebSocket is open
      peer.socket._socket.onopen = function () {
        getLocalStream();
      };

      // handle events representing incoming calls
      peer.on('call', answer);
    }
    catch (e) {
      peer = null;
      logError('error while connecting to server');
    }
  };

  // make an outgoing call
  var dial = function () {
    if (!peer) {
      logError('please connect first');
      return;
    }

    if (!localStream) {
      logError('could not start call as there is no local camera');
      return
    }

    var recipientId = recipientIdEntry.value;

    if (!recipientId) {
      logError('could not start call as no recipient ID is set');
      return;
    }

    getLocalStream(function (stream) {
      logMessage('outgoing call initiated');

      var call = peer.call(recipientId, stream);

      call.on('stream', showRemoteStream);

      call.on('error', function (e) {
        logError('error with call');
        logError(e.message);
      });
    });
  };

  // answer an incoming call
  var answer = function (call) {
    if (!peer) {
      logError('cannot answer a call without a connection');
      return;
    }

    if (!localStream) {
      logError('could not answer call as there is no localStream ready');
      return;
    }

    logMessage('incoming call answered');

    call.on('stream', showRemoteStream);

    call.answer(localStream);
  };

  // wire up button events
  //connectBtn.addEventListener('click', connect);
  //dialBtn.addEventListener('click', dial);
  $("#station_btn").on("click", function() {
    $("#credentials").hide();
    $("#caller-id").val("station");
    //callerIdEntry = "station";
    connect();
  });
  $("#client_btn").on("click", function() {
    $("#credentials").hide();
    $("#caller-id").val("client");
    $("#dial").show();
    connect();
  });
  $("#dial").on("click", function() {
    $("#recipient-id").val("station");
    dial();
  });
});
</script>
</body>
</html>
