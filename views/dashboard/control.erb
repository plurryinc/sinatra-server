<div class="container-fluid">
<!-- Page Heading -->
<!-- row -->
<div class="row">
  <div class="col-lg-6">
    <h1 class="page-header">
      Video Calling <small>Lovely My Pet</small>
    </h1>
    <div id="credentials">
      <input type="hidden" id="caller-id" size="15">
      <!--
      <button id="connect">Connect</button>
      -->
      <button id="client_btn" class="ui-btn ui-btn-inline">연결하기</button>
      <button id="dial" class="ui-btn ui-btn-inline" style="display:none;">Station에 접속하기</button>
    </div>

    <div id="dialler" data-active="false">
      <input type="hidden" id="recipient-id" value="station">
      <div class="remote">
        <h1>상대 영상</h1>
        <video id="remote-video" autoplay></video>
      </div>
      <div class="local">
        <h1>내 영상</h1>
        <video id="local-video" autoplay></video>
      </div>
      <div id="messages">
      </div>
    </div>
  </div>
  <div class="col-lg-6">
    <h1 class="page-header">
      Joystick <small>websocket</small>
    </h1>
    <div class="joystick-limit">
      <div id="joystick" class="joystick" data-code="<%= current_user.groups.first.products.first.product_id %>" ></div>
    </div>
  </div>
  <% @group.products.each_with_index do |p, i| %>
  <div class="col-lg-6">
    <h1 class="page-header">
      Debugger(<%=i%>) <small><%=p.product_id%></small>
    </h1>
    <input type="text" id="input_<%=p.id%>" placeholder="send a test command">
    <div id="msgs_<%=p.id%>"></div>
    <script type="text/javascript">
      $(document).ready(function(){
        function show_<%=p.id%>(msg) {
          $("#msgs_<%=p.id%>").prepend(msg+'<br>');
        }
        var ws_<%=p.id%> = new WebSocket('ws://' + window.location.host + '/ws/<%=p.product_id%>');
        ws_<%=p.id%>.onopen    = function()  { show_<%=p.id%>('websocket opened'); };
        ws_<%=p.id%>.onclose   = function()  { show_<%=p.id%>('websocket closed'); }
        ws_<%=p.id%>.onmessage = function(m) { show_<%=p.id%>(Date() + ': ' +  m.data); };
        $("#input_<%=p.id%>").keypress(function(e) {
          if (e.which == 13) {
            ws_<%=p.id%>.send($(this).val());
            $(this).val("");
          }
        });
      });
    </script>
  </div>
  <% end %>
</div>
<!-- /.row -->
<!-- /.container-fluid -->

<script>
  $(document).ready(function() {
    makeJoystick('#joystick', 160)
  });

document.addEventListener('DOMContentLoaded', function () {
  // PeerJS server location
  var SERVER_IP = 'petsitter.cycorld.com';
  var SERVER_PORT = 3003;

  // DOM elements manipulated as user interacts with the app
  var messageBox = document.querySelector('#messages');
  var callerIdEntry = document.querySelector('#caller-id');
  var connectBtn = document.querySelector('#connect');
  var recipientIdEntry = document.querySelector('#recipient-id');
  var dialBtn = document.querySelector('#dial');
  var remoteVideo = document.querySelector('#remote-video');
  var localVideo = document.querySelector('#local-video');

  // the ID set for this client
  var callerId = null;

  // PeerJS object, instantiated when this client connects with its
  // caller ID
  var peer = null;

  // the local video stream captured with getUserMedia()
  var localStream = null;

  // DOM utilities
  var makePara = function (text) {
    var p = document.createElement('p');
    p.innerText = text;
    return p;
  };

  var addMessage = function (para) {
    if (messageBox.firstChild) {
      messageBox.insertBefore(para, messageBox.firstChild);
    }
    else {
      messageBox.appendChild(para);
    }
  };

  var logError = function (text) {
    var p = makePara('ERROR: ' + text);
    p.style.color = 'red';
    addMessage(p);
  };

  var logMessage = function (text) {
    addMessage(makePara(text));
  };

  // get the local video and audio stream and show preview in the
  // "LOCAL" video element
  // successCb: has the signature successCb(stream); receives
  // the local video stream as an argument
  var getLocalStream = function (successCb) {
    if (localStream && successCb) {
      successCb(localStream);
    }
    else {
      navigator.webkitGetUserMedia(
        {
          audio: true,
          video: true
        },

        function (stream) {
          localStream = stream;

          localVideo.src = window.URL.createObjectURL(stream);

          if (successCb) {
            successCb(stream);
          }
        },

        function (err) {
          logError('failed to access local camera');
          logError(err.message);
        }
      );
    }
  };

  // set the "REMOTE" video element source
  var showRemoteStream = function (stream) {
    remoteVideo.src = window.URL.createObjectURL(stream);
  };

  // set caller ID and connect to the PeerJS server
  var connect = function () {
    callerId = callerIdEntry.value;

    if (!callerId) {
      logError('please set caller ID first');
      return;
    }

    try {
      // create connection to the ID server
      peer = new Peer(callerId, {host: SERVER_IP, port: SERVER_PORT});

      // hack to get around the fact that if a server connection cannot
      // be established, the peer and its socket property both still have
      // open === true; instead, listen to the wrapped WebSocket
      // and show an error if its readyState becomes CLOSED
      peer.socket._socket.onclose = function () {
        logError('no connection to server');
        peer = null;
      };

      // get local stream ready for incoming calls once the wrapped
      // WebSocket is open
      peer.socket._socket.onopen = function () {
        getLocalStream();
      };

      // handle events representing incoming calls
      peer.on('call', answer);
    }
    catch (e) {
      peer = null;
      logError('error while connecting to server');
    }
  };

  // make an outgoing call
  var dial = function () {
    if (!peer) {
      logError('please connect first');
      return;
    }

    if (!localStream) {
      logError('could not start call as there is no local camera');
      return
    }

    var recipientId = recipientIdEntry.value;

    if (!recipientId) {
      logError('could not start call as no recipient ID is set');
      return;
    }

    getLocalStream(function (stream) {
      logMessage('outgoing call initiated');

      var call = peer.call(recipientId, stream);

      call.on('stream', showRemoteStream);

      call.on('error', function (e) {
        logError('error with call');
        logError(e.message);
      });
    });
  };

  // answer an incoming call
  var answer = function (call) {
    if (!peer) {
      logError('cannot answer a call without a connection');
      return;
    }

    if (!localStream) {
      logError('could not answer call as there is no localStream ready');
      return;
    }

    logMessage('incoming call answered');

    call.on('stream', showRemoteStream);

    call.answer(localStream);
  };

  // wire up button events
  //connectBtn.addEventListener('click', connect);
  //dialBtn.addEventListener('click', dial);
  $("#client_btn").on("click", function() {
    $("#caller-id").val("client");
    $("#dial").show();
    connect();
  });
  $("#dial").on("click", function() {
    $("#recipient-id").val("station");
    dial();
  });
});
</script>
